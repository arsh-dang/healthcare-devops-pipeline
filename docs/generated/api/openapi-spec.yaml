openapi: 3.0.3
info:
  title: Healthcare Application API
  description: |
    Comprehensive API for healthcare management system with DevOps pipeline integration.

    ## Features
    - Patient management
    - Appointment scheduling
    - Doctor management
    - Medical records
    - Authentication & authorization
    - Real-time notifications
  version: '${VERSION}'
  contact:
    name: Healthcare DevOps Team
    email: devops@healthcare-app.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5001/api/v1
    description: Development server
  - url: https://api.healthcare-app.com/api/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API is running and healthy
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

  /auth/login:
    post:
      summary: User authentication
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "doctor@hospital.com"
                password:
                  type: string
                  format: password
                  example: "securepassword123"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                        enum: [admin, doctor, nurse, patient]
        '401':
          description: Invalid credentials

  /patients:
    get:
      summary: Get all patients
      description: Retrieve list of all patients (admin/doctor only)
      tags:
        - Patients
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                type: object
                properties:
                  patients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create new patient
      description: Register a new patient in the system
      tags:
        - Patients
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientInput'
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'

  /patients/{id}:
    get:
      summary: Get patient by ID
      description: Retrieve detailed information about a specific patient
      tags:
        - Patients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient not found

    put:
      summary: Update patient
      description: Update patient information
      tags:
        - Patients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientInput'
      responses:
        '200':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'

    delete:
      summary: Delete patient
      description: Remove patient from the system
      tags:
        - Patients
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Patient deleted successfully
        '404':
          description: Patient not found

  /appointments:
    get:
      summary: Get appointments
      description: Retrieve appointments with optional filtering
      tags:
        - Appointments
      security:
        - bearerAuth: []
      parameters:
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: doctorId
          in: query
          schema:
            type: string
        - name: patientId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [scheduled, confirmed, completed, cancelled]
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'

    post:
      summary: Create appointment
      description: Schedule a new appointment
      tags:
        - Appointments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentInput'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /doctors:
    get:
      summary: Get all doctors
      description: Retrieve list of all doctors
      tags:
        - Doctors
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: object
                properties:
                  doctors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Patient:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@email.com"
        phone:
          type: string
          example: "+1-555-0123"
        dateOfBirth:
          type: string
          format: date
          example: "1980-01-15"
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
        medicalRecordNumber:
          type: string
          example: "MRN123456"
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            phone:
              type: string
            relationship:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PatientInput:
      type: object
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        dateOfBirth:
          type: string
          format: date
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
        emergencyContact:
          type: object
          properties:
            name:
              type: string
            phone:
              type: string
            relationship:
              type: string

    Appointment:
      type: object
      properties:
        id:
          type: string
        patientId:
          type: string
        doctorId:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
          example: "10:00"
        duration:
          type: integer
          example: 30
        type:
          type: string
          enum: [consultation, follow-up, procedure, emergency]
        status:
          type: string
          enum: [scheduled, confirmed, in-progress, completed, cancelled, no-show]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AppointmentInput:
      type: object
      required:
        - patientId
        - doctorId
        - date
        - time
        - type
      properties:
        patientId:
          type: string
        doctorId:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
        duration:
          type: integer
          default: 30
        type:
          type: string
          enum: [consultation, follow-up, procedure, emergency]
        notes:
          type: string

    Doctor:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        specialty:
          type: string
          example: "Cardiology"
        licenseNumber:
          type: string
        department:
          type: string
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Invalid or missing authentication token"

    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
              message:
                type: string
                example: "Resource not found"

    ValidationError:
      description: Input validation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation Error"
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
