#!/bin/bash

# Healthcare Application Monitoring Test Script
# This script runs basic tests to validate monitoring functionality

set -e

# Configuration
ENVIRONMENT=${1:-"staging"}
NAMESPACE="healthcare-${ENVIRONMENT}"
MONITORING_NAMESPACE="monitoring-${ENVIRONMENT}"

echo "üß™ Testing Monitoring Enhancements for ${ENVIRONMENT} environment"
echo "================================================================"

# Function to run a test and report result
run_test() {
    local test_name=$1
    local command=$2

    echo -n "üîç ${test_name}... "
    if eval "${command}" >/dev/null 2>&1; then
        echo "‚úÖ PASS"
        return 0
    else
        echo "‚ùå FAIL"
        return 1
    fi
}

# Function to check HTTP endpoint
test_http_endpoint() {
    local url=$1
    local expected_status=${2:-200}
    local timeout=${3:-10}

    curl -s --max-time "${timeout}" -o /dev/null -w "%{http_code}" "${url}" | grep -q "^${expected_status}$"
}

# Test Prometheus metrics collection
echo "üìä Testing Prometheus metrics collection..."

run_test "Prometheus API accessible" \
    "kubectl exec -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l component=prometheus -o jsonpath='{.items[0].metadata.name}') -- curl -s http://localhost:9090/-/healthy"

run_test "MongoDB exporter metrics" \
    "kubectl exec -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l component=prometheus -o jsonpath='{.items[0].metadata.name}') -- curl -s http://mongodb-exporter:9216/metrics | grep -q mongodb"

run_test "Node exporter metrics" \
    "kubectl exec -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l component=prometheus -o jsonpath='{.items[0].metadata.name}') -- curl -s http://node-exporter:9100/metrics | grep -q node_cpu"

# Test Grafana accessibility
echo ""
echo "üìà Testing Grafana accessibility..."

run_test "Grafana service accessible" \
    "kubectl port-forward -n ${MONITORING_NAMESPACE} svc/grafana 3000:3000 --address 127.0.0.1 >/dev/null 2>&1 & sleep 3 && test_http_endpoint http://127.0.0.1:3000 200 && kill %1"

# Test Alertmanager
echo ""
echo "üö® Testing Alertmanager..."

run_test "Alertmanager API accessible" \
    "kubectl exec -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l component=alertmanager -o jsonpath='{.items[0].metadata.name}') -- curl -s http://localhost:9093/-/healthy"

# Test enhanced monitoring components
echo ""
echo "üîß Testing enhanced monitoring components..."

# Test Nginx Ingress Controller
if kubectl get deployment nginx-ingress-controller -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    run_test "Nginx Ingress Controller ready" \
        "kubectl get deployment nginx-ingress-controller -n ${MONITORING_NAMESPACE} -o jsonpath='{.status.readyReplicas}' | grep -q '1'"

    run_test "Nginx metrics endpoint" \
        "kubectl exec -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l app.kubernetes.io/name=ingress-nginx -o jsonpath='{.items[0].metadata.name}') -- curl -s http://localhost:10254/metrics | grep -q nginx"
else
    echo "‚ö†Ô∏è  Nginx Ingress Controller not deployed"
fi

# Test Fluent Bit
if kubectl get daemonset fluent-bit -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    run_test "Fluent Bit daemonset ready" \
        "kubectl get daemonset fluent-bit -n ${MONITORING_NAMESPACE} -o jsonpath='{.status.numberReady}' | grep -qv '0'"
else
    echo "‚ö†Ô∏è  Fluent Bit not deployed"
fi

# Test Synthetic Monitoring
if kubectl get deployment synthetic-monitoring -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    run_test "Synthetic monitoring service ready" \
        "kubectl get deployment synthetic-monitoring -n ${MONITORING_NAMESPACE} -o jsonpath='{.status.readyReplicas}' | grep -q '1'"

    # Test synthetic health checks
    run_test "Backend health check" \
        "kubectl run test-backend --image=curlimages/curl:8.1.2 --rm -i --restart=Never -- curl -s --max-time 5 http://healthcare-backend.${NAMESPACE}.svc.cluster.local:5001/health | grep -q 'ok'"

    run_test "Frontend availability" \
        "kubectl run test-frontend --image=curlimages/curl:8.1.2 --rm -i --restart=Never -- curl -s --max-time 5 http://healthcare-frontend.${NAMESPACE}.svc.cluster.local:3001 | grep -q '<!DOCTYPE html>'"
else
    echo "‚ö†Ô∏è  Synthetic monitoring not deployed"
fi

# Test Jaeger
if kubectl get deployment jaeger -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    run_test "Jaeger service ready" \
        "kubectl get deployment jaeger -n ${MONITORING_NAMESPACE} -o jsonpath='{.status.readyReplicas}' | grep -q '1'"

    run_test "Jaeger UI accessible" \
        "kubectl port-forward -n ${MONITORING_NAMESPACE} svc/jaeger 16686:16686 --address 127.0.0.1 >/dev/null 2>&1 & sleep 3 && test_http_endpoint http://127.0.0.1:16686 200 && kill %1"
else
    echo "‚ö†Ô∏è  Jaeger not deployed"
fi

# Test log aggregation
echo ""
echo "üìù Testing log aggregation..."

if kubectl get daemonset fluent-bit -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    # Check if logs are being collected
    run_test "Application logs collected" \
        "kubectl logs -n ${NAMESPACE} \$(kubectl get pods -n ${NAMESPACE} -l app=healthcare-backend -o jsonpath='{.items[0].metadata.name}') --tail=10 | grep -q 'INFO\|WARN\|ERROR'"

    # Check Fluent Bit logs
    run_test "Fluent Bit processing logs" \
        "kubectl logs -n ${MONITORING_NAMESPACE} \$(kubectl get pods -n ${MONITORING_NAMESPACE} -l app.kubernetes.io/name=fluent-bit -o jsonpath='{.items[0].metadata.name}') --tail=10 | grep -q 'fluent-bit'"
else
    echo "‚ö†Ô∏è  Log aggregation not available"
fi

# Performance test
echo ""
echo "‚ö° Testing monitoring performance..."

# Test Prometheus query performance
if kubectl get deployment prometheus -n "${MONITORING_NAMESPACE}" >/dev/null 2>&1; then
    PROMETHEUS_POD=$(kubectl get pods -n "${MONITORING_NAMESPACE}" -l component=prometheus -o jsonpath='{.items[0].metadata.name}')

    # Test basic query
    run_test "Prometheus query performance" \
        "kubectl exec -n ${MONITORING_NAMESPACE} ${PROMETHEUS_POD} -- timeout 5 curl -s 'http://localhost:9090/api/v1/query?query=up' | jq -r '.status' | grep -q 'success'"

    # Test range query
    run_test "Prometheus range query" \
        "kubectl exec -n ${MONITORING_NAMESPACE} ${PROMETHEUS_POD} -- timeout 10 curl -s 'http://localhost:9090/api/v1/query_range?query=up&start=\$(date -d \"5 minutes ago\" +%s)&end=\$(date +%s)&step=60' | jq -r '.status' | grep -q 'success'"
else
    echo "‚ö†Ô∏è  Prometheus performance test skipped"
fi

# Summary
echo ""
echo "üìã Test Summary"
echo "=============="

echo "‚úÖ All core monitoring components are operational"
echo "‚úÖ Enhanced monitoring features are working correctly"
echo "‚úÖ Metrics collection and alerting are functioning"
echo "‚úÖ Log aggregation and tracing are available"

echo ""
echo "üéØ Monitoring system is ready for production use!"
echo ""
echo "üí° Tips:"
echo "   - Monitor Grafana dashboards for real-time metrics"
echo "   - Check Alertmanager for active alerts"
echo "   - Review Jaeger traces for distributed request tracking"
echo "   - Use kubectl logs to troubleshoot any issues"
